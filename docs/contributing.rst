Development
==============

This document covers the technical aspects of developing this caffeine release.  To find out how to get your patches accepted upstream, read our `contributor guide <https://github.com/drewcrawford/caffeine/blob/master/CONTRIBUTING.rst>`_.

First steps
###########

You should first have caffeine installed in :ref:`development-mode`.

It's probably also a good idea to run the tests.

Running tests
################

There are a series of different test suites used by caffeine, as detailed on our `build status page <https://github.com/drewcrawford/caffeine#build-status>`_.

Python tests
--------------

The default test suite ("dockertests") can be run with:

.. code-block:: bash

   tests/tests.py

This script supports some additional options:

.. option:: --teamcity

Enables teamcity reporting for the test suite

.. option:: --sonar

Enables sonar reporting for the test suite

.. option:: test_loopback

This doesn't run ordinary tests, but instead starts up a caffeine :term:`worker` and :term:`router` that is ready for the caffeine-ios unit tests.

iOS tests
--------------

iOS test suite contains both standalone tests, and client/server tests that connect to a caffeine :term:`server`.

The server's :doc:`url` is generated by the :class:`caffeine.codegen` utility, however it can be overridden at compile-time by setting the preprocessor macro CAFFEINE_OVERRIDE_URL to a string like @"tcp://localhost:55555".  Note that the keys are not included, and the keys generated by codegen are used.

If you are using ``xcodebuild`` the following syntax may be illuminative:

.. code-block:: bash

      ZEROMQ_URL="tcp://localhost:55555"
      xcodebuild ... GCC_PREPROCESSOR_DEFINITIONS="\$(value) CAFFEINE_OVERRIDE_URL=@\\\"${ZEROMQ_URL}\\\""







